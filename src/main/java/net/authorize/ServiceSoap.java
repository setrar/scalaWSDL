
package net.authorize;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "ServiceSoap", targetNamespace = "https://api.authorize.net/soap/v1/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ServiceSoap {


    /**
     * This method is used to test the availability of the API.
     * 
     * @return
     *     returns net.authorize.ANetApiResponseType
     */
    @WebMethod(operationName = "IsAlive", action = "https://api.authorize.net/soap/v1/IsAlive")
    @WebResult(name = "IsAliveResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "IsAlive", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.IsAlive")
    @ResponseWrapper(localName = "IsAliveResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.IsAliveResponse")
    public ANetApiResponseType isAlive();

    /**
     * This method is used to test the availability of the API.
     * 
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.ANetApiResponseType
     */
    @WebMethod(operationName = "AuthenticateTest", action = "https://api.authorize.net/soap/v1/AuthenticateTest")
    @WebResult(name = "AuthenticateTestResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "AuthenticateTest", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.AuthenticateTest")
    @ResponseWrapper(localName = "AuthenticateTestResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.AuthenticateTestResponse")
    public ANetApiResponseType authenticateTest(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication);

    /**
     * This method is used to create a new ARB subscription. The merchant must be signed up for the ARB service to use it.
     * 
     * @param subscription
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.ARBCreateSubscriptionResponseType
     */
    @WebMethod(operationName = "ARBCreateSubscription", action = "https://api.authorize.net/soap/v1/ARBCreateSubscription")
    @WebResult(name = "ARBCreateSubscriptionResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "ARBCreateSubscription", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBCreateSubscription")
    @ResponseWrapper(localName = "ARBCreateSubscriptionResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBCreateSubscriptionResponse")
    public ARBCreateSubscriptionResponseType arbCreateSubscription(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "subscription", targetNamespace = "https://api.authorize.net/soap/v1/")
        ARBSubscriptionType subscription);

    /**
     * This method is used to update an existing ARB subscription. The merchant must be signed up for the ARB service to use it.
     * 
     * @param subscription
     * @param merchantAuthentication
     * @param subscriptionId
     * @return
     *     returns net.authorize.ARBUpdateSubscriptionResponseType
     */
    @WebMethod(operationName = "ARBUpdateSubscription", action = "https://api.authorize.net/soap/v1/ARBUpdateSubscription")
    @WebResult(name = "ARBUpdateSubscriptionResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "ARBUpdateSubscription", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBUpdateSubscription")
    @ResponseWrapper(localName = "ARBUpdateSubscriptionResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBUpdateSubscriptionResponse")
    public ARBUpdateSubscriptionResponseType arbUpdateSubscription(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "subscriptionId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long subscriptionId,
        @WebParam(name = "subscription", targetNamespace = "https://api.authorize.net/soap/v1/")
        ARBSubscriptionType subscription);

    /**
     * This method is used to cancel an existing ARB subscription. The merchant must be signed up for the ARB service to use it.
     * 
     * @param merchantAuthentication
     * @param subscriptionId
     * @return
     *     returns net.authorize.ARBCancelSubscriptionResponseType
     */
    @WebMethod(operationName = "ARBCancelSubscription", action = "https://api.authorize.net/soap/v1/ARBCancelSubscription")
    @WebResult(name = "ARBCancelSubscriptionResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "ARBCancelSubscription", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBCancelSubscription")
    @ResponseWrapper(localName = "ARBCancelSubscriptionResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBCancelSubscriptionResponse")
    public ARBCancelSubscriptionResponseType arbCancelSubscription(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "subscriptionId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long subscriptionId);

    /**
     * This method is used to get an existing ARB subscription status. The merchant must be signed up for the ARB service to use it.
     * 
     * @param merchantAuthentication
     * @param subscriptionId
     * @return
     *     returns net.authorize.ARBGetSubscriptionStatusResponseType
     */
    @WebMethod(operationName = "ARBGetSubscriptionStatus", action = "https://api.authorize.net/soap/v1/ARBGetSubscriptionStatus")
    @WebResult(name = "ARBGetSubscriptionStatusResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "ARBGetSubscriptionStatus", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBGetSubscriptionStatus")
    @ResponseWrapper(localName = "ARBGetSubscriptionStatusResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBGetSubscriptionStatusResponse")
    public ARBGetSubscriptionStatusResponseType arbGetSubscriptionStatus(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "subscriptionId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long subscriptionId);

    /**
     * This method is used to get existing ARB subscriptions. The merchant must be signed up for the ARB service to use it.
     * 
     * @param request
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.ARBGetSubscriptionListResponseType
     */
    @WebMethod(operationName = "ARBGetSubscriptionList", action = "https://api.authorize.net/soap/v1/ARBGetSubscriptionList")
    @WebResult(name = "ARBGetSubscriptionListResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "ARBGetSubscriptionList", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBGetSubscriptionList")
    @ResponseWrapper(localName = "ARBGetSubscriptionListResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ARBGetSubscriptionListResponse")
    public ARBGetSubscriptionListResponseType arbGetSubscriptionList(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "request", targetNamespace = "https://api.authorize.net/soap/v1/")
        ARBGetSubscriptionListRequestType request);

    /**
     * This method is used to create a new customer profile along with any customer payment profiles and customer shipping addresses for the customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param validationMode
     * @param merchantAuthentication
     * @param profile
     * @return
     *     returns net.authorize.CreateCustomerProfileResponseType
     */
    @WebMethod(operationName = "CreateCustomerProfile", action = "https://api.authorize.net/soap/v1/CreateCustomerProfile")
    @WebResult(name = "CreateCustomerProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "CreateCustomerProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerProfile")
    @ResponseWrapper(localName = "CreateCustomerProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerProfileResponse")
    public CreateCustomerProfileResponseType createCustomerProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "profile", targetNamespace = "https://api.authorize.net/soap/v1/")
        CustomerProfileType profile,
        @WebParam(name = "validationMode", targetNamespace = "https://api.authorize.net/soap/v1/")
        ValidationModeEnum validationMode);

    /**
     * This method is used to create a new customer profile along with any customer payment profiles and customer shipping addresses for the customer profile, using information from a previous transaction. The merchant must be signed up for the CIM service to use it.
     * 
     * @param transId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.CreateCustomerProfileResponseType
     */
    @WebMethod(operationName = "CreateCustomerProfileFromTransaction", action = "https://api.authorize.net/soap/v1/CreateCustomerProfileFromTransaction")
    @WebResult(name = "CreateCustomerProfileFromTransactionResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "CreateCustomerProfileFromTransaction", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerProfileFromTransaction")
    @ResponseWrapper(localName = "CreateCustomerProfileFromTransactionResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerProfileFromTransactionResponse")
    public CreateCustomerProfileResponseType createCustomerProfileFromTransaction(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "transId", targetNamespace = "https://api.authorize.net/soap/v1/")
        String transId);

    /**
     * This method is used to create a new customer payment profile for an existing customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param validationMode
     * @param paymentProfile
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.CreateCustomerPaymentProfileResponseType
     */
    @WebMethod(operationName = "CreateCustomerPaymentProfile", action = "https://api.authorize.net/soap/v1/CreateCustomerPaymentProfile")
    @WebResult(name = "CreateCustomerPaymentProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "CreateCustomerPaymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerPaymentProfile")
    @ResponseWrapper(localName = "CreateCustomerPaymentProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerPaymentProfileResponse")
    public CreateCustomerPaymentProfileResponseType createCustomerPaymentProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "paymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/")
        CustomerPaymentProfileType paymentProfile,
        @WebParam(name = "validationMode", targetNamespace = "https://api.authorize.net/soap/v1/")
        ValidationModeEnum validationMode);

    /**
     * This method is used to create a new customer shipping address for an existing customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param address
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.CreateCustomerShippingAddressResponseType
     */
    @WebMethod(operationName = "CreateCustomerShippingAddress", action = "https://api.authorize.net/soap/v1/CreateCustomerShippingAddress")
    @WebResult(name = "CreateCustomerShippingAddressResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "CreateCustomerShippingAddress", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerShippingAddress")
    @ResponseWrapper(localName = "CreateCustomerShippingAddressResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerShippingAddressResponse")
    public CreateCustomerShippingAddressResponseType createCustomerShippingAddress(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "address", targetNamespace = "https://api.authorize.net/soap/v1/")
        CustomerAddressType address);

    /**
     * This method is used to retrieve an existing customer profile along with all the customer payment profiles and customer shipping addresses for the customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetCustomerProfileResponseType
     */
    @WebMethod(operationName = "GetCustomerProfile", action = "https://api.authorize.net/soap/v1/GetCustomerProfile")
    @WebResult(name = "GetCustomerProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetCustomerProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerProfile")
    @ResponseWrapper(localName = "GetCustomerProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerProfileResponse")
    public GetCustomerProfileResponseType getCustomerProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId);

    /**
     * This method is used to retrieve an existing customer payment profile for a customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerPaymentProfileId
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetCustomerPaymentProfileResponseType
     */
    @WebMethod(operationName = "GetCustomerPaymentProfile", action = "https://api.authorize.net/soap/v1/GetCustomerPaymentProfile")
    @WebResult(name = "GetCustomerPaymentProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetCustomerPaymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerPaymentProfile")
    @ResponseWrapper(localName = "GetCustomerPaymentProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerPaymentProfileResponse")
    public GetCustomerPaymentProfileResponseType getCustomerPaymentProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "customerPaymentProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerPaymentProfileId);

    /**
     * This method is used to retrieve an existing customer shipping address for a customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerAddressId
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetCustomerShippingAddressResponseType
     */
    @WebMethod(operationName = "GetCustomerShippingAddress", action = "https://api.authorize.net/soap/v1/GetCustomerShippingAddress")
    @WebResult(name = "GetCustomerShippingAddressResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetCustomerShippingAddress", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerShippingAddress")
    @ResponseWrapper(localName = "GetCustomerShippingAddressResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerShippingAddressResponse")
    public GetCustomerShippingAddressResponseType getCustomerShippingAddress(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "customerAddressId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerAddressId);

    /**
     * This method is used to update an existing customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param merchantAuthentication
     * @param profile
     * @return
     *     returns net.authorize.UpdateCustomerProfileResponseType
     */
    @WebMethod(operationName = "UpdateCustomerProfile", action = "https://api.authorize.net/soap/v1/UpdateCustomerProfile")
    @WebResult(name = "UpdateCustomerProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "UpdateCustomerProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateCustomerProfile")
    @ResponseWrapper(localName = "UpdateCustomerProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateCustomerProfileResponse")
    public UpdateCustomerProfileResponseType updateCustomerProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "profile", targetNamespace = "https://api.authorize.net/soap/v1/")
        CustomerProfileExType profile);

    /**
     * This method is used to update an existing customer payment profile for a customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param validationMode
     * @param paymentProfile
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.UpdateCustomerPaymentProfileResponseType
     */
    @WebMethod(operationName = "UpdateCustomerPaymentProfile", action = "https://api.authorize.net/soap/v1/UpdateCustomerPaymentProfile")
    @WebResult(name = "UpdateCustomerPaymentProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "UpdateCustomerPaymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateCustomerPaymentProfile")
    @ResponseWrapper(localName = "UpdateCustomerPaymentProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateCustomerPaymentProfileResponse")
    public UpdateCustomerPaymentProfileResponseType updateCustomerPaymentProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "paymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/")
        CustomerPaymentProfileExType paymentProfile,
        @WebParam(name = "validationMode", targetNamespace = "https://api.authorize.net/soap/v1/")
        ValidationModeEnum validationMode);

    /**
     * This method is used to update an existing customer shipping address for a customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param address
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.UpdateCustomerShippingAddressResponseType
     */
    @WebMethod(operationName = "UpdateCustomerShippingAddress", action = "https://api.authorize.net/soap/v1/UpdateCustomerShippingAddress")
    @WebResult(name = "UpdateCustomerShippingAddressResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "UpdateCustomerShippingAddress", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateCustomerShippingAddress")
    @ResponseWrapper(localName = "UpdateCustomerShippingAddressResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateCustomerShippingAddressResponse")
    public UpdateCustomerShippingAddressResponseType updateCustomerShippingAddress(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "address", targetNamespace = "https://api.authorize.net/soap/v1/")
        CustomerAddressExType address);

    /**
     * This method is used to delete an existing customer profile along with all the customer payment profiles and customer shipping addresses for the customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.DeleteCustomerProfileResponseType
     */
    @WebMethod(operationName = "DeleteCustomerProfile", action = "https://api.authorize.net/soap/v1/DeleteCustomerProfile")
    @WebResult(name = "DeleteCustomerProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "DeleteCustomerProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.DeleteCustomerProfile")
    @ResponseWrapper(localName = "DeleteCustomerProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.DeleteCustomerProfileResponse")
    public DeleteCustomerProfileResponseType deleteCustomerProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId);

    /**
     * This method is used to delete an existing customer payment profile from a customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerPaymentProfileId
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.DeleteCustomerPaymentProfileResponseType
     */
    @WebMethod(operationName = "DeleteCustomerPaymentProfile", action = "https://api.authorize.net/soap/v1/DeleteCustomerPaymentProfile")
    @WebResult(name = "DeleteCustomerPaymentProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "DeleteCustomerPaymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.DeleteCustomerPaymentProfile")
    @ResponseWrapper(localName = "DeleteCustomerPaymentProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.DeleteCustomerPaymentProfileResponse")
    public DeleteCustomerPaymentProfileResponseType deleteCustomerPaymentProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "customerPaymentProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerPaymentProfileId);

    /**
     * This method is used to delete an existing customer shipping address from a customer profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerAddressId
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.DeleteCustomerShippingAddressResponseType
     */
    @WebMethod(operationName = "DeleteCustomerShippingAddress", action = "https://api.authorize.net/soap/v1/DeleteCustomerShippingAddress")
    @WebResult(name = "DeleteCustomerShippingAddressResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "DeleteCustomerShippingAddress", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.DeleteCustomerShippingAddress")
    @ResponseWrapper(localName = "DeleteCustomerShippingAddressResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.DeleteCustomerShippingAddressResponse")
    public DeleteCustomerShippingAddressResponseType deleteCustomerShippingAddress(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "customerAddressId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerAddressId);

    /**
     * This method is used to generate a payment transaction for a customer payment profile. The merchant must be signed up for the CIM service to use it.
     * 
     * @param transaction
     * @param merchantAuthentication
     * @param extraOptions
     * @return
     *     returns net.authorize.CreateCustomerProfileTransactionResponseType
     */
    @WebMethod(operationName = "CreateCustomerProfileTransaction", action = "https://api.authorize.net/soap/v1/CreateCustomerProfileTransaction")
    @WebResult(name = "CreateCustomerProfileTransactionResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "CreateCustomerProfileTransaction", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerProfileTransaction")
    @ResponseWrapper(localName = "CreateCustomerProfileTransactionResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.CreateCustomerProfileTransactionResponse")
    public CreateCustomerProfileTransactionResponseType createCustomerProfileTransaction(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "transaction", targetNamespace = "https://api.authorize.net/soap/v1/")
        ProfileTransactionType transaction,
        @WebParam(name = "extraOptions", targetNamespace = "https://api.authorize.net/soap/v1/")
        String extraOptions);

    /**
     * This method is used to check a customer payment profile by generating a test transaction for it. The merchant must be signed up for the CIM service to use it.
     * 
     * @param customerPaymentProfileId
     * @param customerShippingAddressId
     * @param validationMode
     * @param customerProfileId
     * @param merchantAuthentication
     * @param cardCode
     * @return
     *     returns net.authorize.ValidateCustomerPaymentProfileResponseType
     */
    @WebMethod(operationName = "ValidateCustomerPaymentProfile", action = "https://api.authorize.net/soap/v1/ValidateCustomerPaymentProfile")
    @WebResult(name = "ValidateCustomerPaymentProfileResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "ValidateCustomerPaymentProfile", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ValidateCustomerPaymentProfile")
    @ResponseWrapper(localName = "ValidateCustomerPaymentProfileResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.ValidateCustomerPaymentProfileResponse")
    public ValidateCustomerPaymentProfileResponseType validateCustomerPaymentProfile(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "customerPaymentProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerPaymentProfileId,
        @WebParam(name = "customerShippingAddressId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerShippingAddressId,
        @WebParam(name = "cardCode", targetNamespace = "https://api.authorize.net/soap/v1/")
        String cardCode,
        @WebParam(name = "validationMode", targetNamespace = "https://api.authorize.net/soap/v1/")
        ValidationModeEnum validationMode);

    /**
     * This method is used to retrieve a list of profile identifiers. The merchant must be signed up for the CIM service to use it.
     * 
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetCustomerProfileIdsResponseType
     */
    @WebMethod(operationName = "GetCustomerProfileIds", action = "https://api.authorize.net/soap/v1/GetCustomerProfileIds")
    @WebResult(name = "GetCustomerProfileIdsResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetCustomerProfileIds", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerProfileIds")
    @ResponseWrapper(localName = "GetCustomerProfileIdsResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetCustomerProfileIdsResponse")
    public GetCustomerProfileIdsResponseType getCustomerProfileIds(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication);

    /**
     * This method is used to give access to the hosted customer profile page to one of your customers. The merchant must be signed up for the CIM service to use it.
     * 
     * @param hostedProfileSettings
     * @param customerProfileId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetHostedProfilePageResponseType
     */
    @WebMethod(operationName = "GetHostedProfilePage", action = "https://api.authorize.net/soap/v1/GetHostedProfilePage")
    @WebResult(name = "GetHostedProfilePageResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetHostedProfilePage", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetHostedProfilePage")
    @ResponseWrapper(localName = "GetHostedProfilePageResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetHostedProfilePageResponse")
    public GetHostedProfilePageResponseType getHostedProfilePage(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "customerProfileId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long customerProfileId,
        @WebParam(name = "hostedProfileSettings", targetNamespace = "https://api.authorize.net/soap/v1/")
        ArrayOfSettingType hostedProfileSettings);

    /**
     * This method is used void or release an order after getting a partial authorization for a transaction.
     * 
     * @param splitTenderId
     * @param splitTenderStatus
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.UpdateSplitTenderGroupResponseType
     */
    @WebMethod(operationName = "UpdateSplitTenderGroup", action = "https://api.authorize.net/soap/v1/UpdateSplitTenderGroup")
    @WebResult(name = "UpdateSplitTenderGroupResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "UpdateSplitTenderGroup", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateSplitTenderGroup")
    @ResponseWrapper(localName = "UpdateSplitTenderGroupResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.UpdateSplitTenderGroupResponse")
    public UpdateSplitTenderGroupResponseType updateSplitTenderGroup(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "splitTenderId", targetNamespace = "https://api.authorize.net/soap/v1/")
        long splitTenderId,
        @WebParam(name = "splitTenderStatus", targetNamespace = "https://api.authorize.net/soap/v1/")
        SplitTenderStatusEnum splitTenderStatus);

    /**
     * This method is used to retrieve detailed information about a single transaction.
     * 
     * @param transId
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetTransactionDetailsResponseType
     */
    @WebMethod(operationName = "GetTransactionDetails", action = "https://api.authorize.net/soap/v1/GetTransactionDetails")
    @WebResult(name = "GetTransactionDetailsResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetTransactionDetails", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetTransactionDetails")
    @ResponseWrapper(localName = "GetTransactionDetailsResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetTransactionDetailsResponse")
    public GetTransactionDetailsResponseType getTransactionDetails(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "transId", targetNamespace = "https://api.authorize.net/soap/v1/")
        String transId);

    /**
     * This method is used to retrieve a list of settled batches.
     * 
     * @param request
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetSettledBatchListResponseType
     */
    @WebMethod(operationName = "GetSettledBatchList", action = "https://api.authorize.net/soap/v1/GetSettledBatchList")
    @WebResult(name = "GetSettledBatchListResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetSettledBatchList", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetSettledBatchList")
    @ResponseWrapper(localName = "GetSettledBatchListResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetSettledBatchListResponse")
    public GetSettledBatchListResponseType getSettledBatchList(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "request", targetNamespace = "https://api.authorize.net/soap/v1/")
        GetSettledBatchListRequestType request);

    /**
     * This method is used to get the batch details for the specified BatchId.
     * 
     * @param request
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetBatchStatisticsResponseType
     */
    @WebMethod(operationName = "GetBatchStatistics", action = "https://api.authorize.net/soap/v1/GetBatchStatistics")
    @WebResult(name = "GetBatchStatisticsResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetBatchStatistics", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetBatchStatistics")
    @ResponseWrapper(localName = "GetBatchStatisticsResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetBatchStatisticsResponse")
    public GetBatchStatisticsResponseType getBatchStatistics(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "request", targetNamespace = "https://api.authorize.net/soap/v1/")
        GetBatchStatisticsRequestType request);

    /**
     * This method is used to retrieve a list of settled transactions.
     * 
     * @param request
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetTransactionListResponseType
     */
    @WebMethod(operationName = "GetTransactionList", action = "https://api.authorize.net/soap/v1/GetTransactionList")
    @WebResult(name = "GetTransactionListResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetTransactionList", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetTransactionList")
    @ResponseWrapper(localName = "GetTransactionListResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetTransactionListResponse")
    public GetTransactionListResponseType getTransactionList(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "request", targetNamespace = "https://api.authorize.net/soap/v1/")
        GetTransactionListRequestType request);

    /**
     * This method is used to retrieve a list of unsettled transactions.
     * 
     * @param request
     * @param merchantAuthentication
     * @return
     *     returns net.authorize.GetUnsettledTransactionListResponseType
     */
    @WebMethod(operationName = "GetUnsettledTransactionList", action = "https://api.authorize.net/soap/v1/GetUnsettledTransactionList")
    @WebResult(name = "GetUnsettledTransactionListResult", targetNamespace = "https://api.authorize.net/soap/v1/")
    @RequestWrapper(localName = "GetUnsettledTransactionList", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetUnsettledTransactionList")
    @ResponseWrapper(localName = "GetUnsettledTransactionListResponse", targetNamespace = "https://api.authorize.net/soap/v1/", className = "net.authorize.GetUnsettledTransactionListResponse")
    public GetUnsettledTransactionListResponseType getUnsettledTransactionList(
        @WebParam(name = "merchantAuthentication", targetNamespace = "https://api.authorize.net/soap/v1/")
        MerchantAuthenticationType merchantAuthentication,
        @WebParam(name = "request", targetNamespace = "https://api.authorize.net/soap/v1/")
        GetUnsettledTransactionListRequestType request);

}
